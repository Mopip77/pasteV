# 产品需求文档 (PRD): 语义化搜索

## 1. 功能概述

为 pasteV 添加基于 embedding 向量的语义化搜索功能，使用户可以根据内容的"含义"而非精确的关键词来搜索剪贴板历史记录。

## 2. 核心组件与需求

### 2.1 Embedding 向量生成

- **触发时机**: 在监听到新的剪贴板内容（文本或图片）被保存到历史记录后触发。
- **文本处理**:
  - 对剪贴板中的文本内容，调用 OpenAI 的 `text-embedding-3-small` 模型生成 embedding 向量。
- **图片处理**:
  - 对剪贴板中的图片内容，首先调用 OpenAI 的多模态模型（如 `gpt-4-vision-preview`）生成对图片的详细文字描述。
  - 然后，对生成的文字描述调用 `text-embedding-3-small` 模型生成 embedding 向量。
- **错误处理**: 优雅地处理 API 调用失败的情况，例如网络错误或 API 限制，确保不影响主应用的正常运行。可以考虑失败后重试的机制。

### 2.2 数据库层变更

- **新建数据表**: 在现有的 SQLite 数据库中，新建一张名为 `clipboard_embeddings` 的表。
- **表结构**:
  - `id`: INTEGER, 主键, 自增。
  - `history_id`: INTEGER, 外键，与 `clipboard_history` 表的主键关联，确保一一对应关系。
  - `vector`: BLOB, 用于存储生成的 embedding 向量。
  - `model`: TEXT, 记录生成该向量所使用的模型名称（例如 'text-embedding-3-small'）。
- **数据一致性**: 确保 `clipboard_history` 表中的记录被删除时，`clipboard_embeddings` 中对应的向量记录也一并被删除。

### 2.3 语义化搜索业务逻辑

- **默认状态**: 语义化搜索功能默认关闭。
- **触发逻辑**:
  1. 用户在搜索框中输入查询文本。
  2. 调用 OpenAI 的 embedding 接口，为用户的查询文本生成一个"查询向量"。
  3. 从 `clipboard_embeddings` 表中检索出所有存储的向量。
  4. 在应用层计算"查询向量"与数据库中每个向量的余弦相似度（cosine similarity）。
  5. 根据相似度得分从高到低对结果进行排序。
  6. 返回得分最高的 N 条结果所对应的 `clipboard_history` 记录。

### 2.4 用户界面 (UI) 与交互 (UX)

- **搜索按钮**:
  - 当用户在搜索框中开始输入时，在输入框旁边（或下方）出现一个"向量搜索"或"语义搜索"的开关/按钮。
  - 该按钮的交互逻辑应与现有的"正则表达式"搜索按钮保持一致，以确保用户体验的统一性。
- **激活搜索**:
  - 只有当用户主动点击并激活"向量搜索"按钮后，才执行上述的语义化搜索逻辑并刷新搜索结果列表。
  - 界面应有明确的视觉提示（如按钮高亮），告知用户当前正处于语义化搜索模式。 